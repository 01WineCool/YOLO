class RFAConv(nn.Module):
    def __init__(self, in_channel, out_channel, kernel_size=3, stride=1):
        super().__init__()
        self.kernel_size = kernel_size

        self.get_weight = nn.Sequential(nn.AvgPool2d(kernel_size=kernel_size, padding=kernel_size // 2, stride=stride),
                                        nn.Conv2d(in_channel, in_channel * (kernel_size ** 2), kernel_size=1,
                                                  groups=in_channel, bias=False))
        self.generate_feature = nn.Sequential(
            nn.Conv2d(in_channel, in_channel * (kernel_size ** 2), kernel_size=kernel_size, padding=kernel_size // 2,
                      stride=stride, groups=in_channel, bias=False),
            nn.BatchNorm2d(in_channel * (kernel_size ** 2)),
            nn.ReLU())

        self.conv = Conv(in_channel, out_channel, k=kernel_size, s=kernel_size, p=0)

    def forward(self, x):
        b, c = x.shape[0:2]
        weight = self.get_weight(x)
        h, w = weight.shape[2:]
        weighted = weight.view(b, c, self.kernel_size ** 2, h, w).softmax(2)  # b c*kernel**2,h,w ->  b c k**2 h w
        feature = self.generate_feature(x).view(b, c, self.kernel_size ** 2, h,
                                                w)
        weighted_data = feature * weighted
        conv_data = rearrange(weighted_data, 'b c (n1 n2) h w -> b c (h n1) (w n2)', n1=self.kernel_size,

                              n2=self.kernel_size)
        return self.conv(conv_data)



# class C2f_RFAConv(nn.Module):
#
#     def __init__(self, c1, c2, n=1, shortcut=False, g=1, e=0.5):
#
#         super().__init__()
#         self.c = int(c2 * e)
#         self.cv1 = Conv(c1, 2 * self.c, 1, 1)
#         self.cv2 = Conv((2 + n) * self.c, c2, 1)
#         self.m = nn.ModuleList(
#             Bottleneck_RFAConv(self.c, self.c, shortcut, g, k=((3, 3), (3, 3)), e=1.0) for _ in range(n))
#
#     def forward(self, x):
#
#         xz = self.cv1(x)
#         z = xz.chunk(2, 1)
#         y = list(z)
#         y.extend(m(y[-1]) for m in self.m)
#         return self.cv2(torch.cat(y, 1))
#
#     def forward_split(self, x):
#         y = list(self.cv1(x).split((self.c, self.c), 1))
#         y.extend(m(y[-1]) for m in self.m)
#         return self.cv2(torch.cat(y, 1))


class C2f_RFAConv(nn.Module):
    def __init__(self, c1, c2, n=1, shortcut=False, g=1, e=0.5):
        """Initialize CSP bottleneck layer with two convolutions with arguments ch_in, ch_out, number, shortcut, groups,
        expansion.
        """
        super().__init__()
        self.c = int(c2 * e)
        self.cv1 = Conv(c1, 2 * self.c, 1, 1)
        self.cv2 = Conv((2 + n) * self.c, c2, 1)
        self.m = nn.ModuleList(
            Bottleneck_RFAConv(self.c, self.c, shortcut, g, k=((3, 3), (3, 3)), e=1.0) for _ in range(n))

        self.avg_pool = nn.AvgPool2d(1)
        self.cv3 = Conv(c1, 2 * self.c, 3, 1)
        self.cv4 = Conv(c1, 2 * self.c, 5, 1)


# def forward(self, x):
#     xz = self.cv1(x)
#     z = xz.chunk(2, 1)
#     y = list(z)
#     y.extend(m(y[-1]) for m in self.m)
#
#     # 池化操作
#     out = self.avg_pool(x)
#     pooled_cv3 = self.avg_pool(self.cv3(x))
#     pooled_cv4 = self.avg_pool(self.cv4(x))
#
#     # 拼接特征图
#     out = torch.cat(y, 1)
#     out = torch.cat([out, pooled_cv3, pooled_cv4], dim=1)
#
#     # 经过 cv2
#     out = self.cv2(out)
#
#     return out + x
